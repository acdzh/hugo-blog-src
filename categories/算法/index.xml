<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 on 串串的杂七杂八</title><link>https://blog.acdzh.ltd/categories/%E7%AE%97%E6%B3%95/</link><description>Recent content in 算法 on 串串的杂七杂八</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Copyright (c) 2020. All rights reserved.</copyright><lastBuildDate>Wed, 12 Aug 2020 17:41:09 +0800</lastBuildDate><atom:link href="https://blog.acdzh.ltd/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>实现一个简单的路由匹配组件 - Kori</title><link>https://blog.acdzh.ltd/tec/2020-08/kori/</link><pubDate>Wed, 12 Aug 2020 17:41:09 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-08/kori/</guid><description>项目地址: Github 预期 前些天在做一个 mock 组件, 需要对一些函数像按照路由进行调用, 大概像下面这样: // register router.get('/user/id/:id/', ({id}) =&amp;gt; { console.log(id); }); router.post('/test/', () =&amp;gt; { console.log('this is a test'); }); // use router.handle('https://www.example.com/user/id/123456/'); 预期仅仅使用</description></item><item><title>LeetCode 887 鸡蛋掉落</title><link>https://blog.acdzh.ltd/tec/2020-04/leetcode_887_super_egg_drop/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-04/leetcode_887_super_egg_drop/</guid><description>10. 鸡蛋掉落 - 力扣 leetcode-cn.com Google的面试题, 网上的题解太多了, 所以这篇文章就不做题解之用了. 主要是这里遇到的反向 dp 有点意思, 记录一下. 以下: K: 鸡</description></item><item><title>LeetCode 10 正则表达式匹配 Regular Expression Matching</title><link>https://blog.acdzh.ltd/tec/2020-04/leetcode_10_regular_expression_matching/</link><pubDate>Sat, 04 Apr 2020 04:02:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-04/leetcode_10_regular_expression_matching/</guid><description>10. 正则表达式匹配 - 力扣 leetcode-cn.com 这个题本来没什么好说的, 简单的动态规划. 本来想直接糊个动态规划过去..然后看到题解里一个有限自动机的解法. 不过感觉废</description></item></channel></rss>