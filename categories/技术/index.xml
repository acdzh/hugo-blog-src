<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on 串串的杂七杂八</title><link>https://blog.acdzh.ltd/categories/%E6%8A%80%E6%9C%AF/</link><description>Recent content in 技术 on 串串的杂七杂八</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Copyright (c) 2020. All rights reserved.</copyright><lastBuildDate>Mon, 19 Oct 2020 15:44:21 +0800</lastBuildDate><atom:link href="https://blog.acdzh.ltd/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 OpenCV 检测并生成 CSS 动画</title><link>https://blog.acdzh.ltd/tec/2020-10/tktok_loading_animation/</link><pubDate>Mon, 19 Oct 2020 15:44:21 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-10/tktok_loading_animation/</guid><description>这个是上个月的事情了, 现在记录一下. 上个月有有一个需求, 要求用 SVG 实现 Tiktok 的 Loading 动画. 这个动画的 Gif 如下所示: 既然有 Gif 有为什么要再用 SVG 实现一遍呢, 还</description></item><item><title>在 Jupyter Notebook 中使用 Javascript</title><link>https://blog.acdzh.ltd/tec/2020-10/jupyter_notebook_node/</link><pubDate>Mon, 19 Oct 2020 15:20:54 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-10/jupyter_notebook_node/</guid><description>安装 Jupyter Notebook pip3 install jupyter 添加 Node 支持 brew install zeromq pip3 install --upgrade pyzmq yarn global add ijavascript ijsinstall 设置主题 pip3 install jupyterthemes jt -t onedork 启动 ijsnotebook --port=8889 效果如下: 历史记录 Version Action Time 1.0 Init 2020-10-19 15:20</description></item><item><title>实现一个简单的路由匹配组件 - Kori</title><link>https://blog.acdzh.ltd/tec/2020-08/kori/</link><pubDate>Wed, 12 Aug 2020 17:41:09 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-08/kori/</guid><description>项目地址: Github 预期 前些天在做一个 mock 组件, 需要对一些函数像按照路由进行调用, 大概像下面这样: // register router.get('/user/id/:id/', ({id}) =&amp;gt; { console.log(id); }); router.post('/test/', () =&amp;gt; { console.log('this is a test'); }); // use router.handle('https://www.example.com/user/id/123456/'); 预期仅仅使用</description></item><item><title>Koa 入门</title><link>https://blog.acdzh.ltd/tec/2020-07/koa_begining/</link><pubDate>Tue, 07 Jul 2020 12:24:33 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-07/koa_begining/</guid><description>KOA 官方文档 KOA 是由 Express 原班人马打造的新 Web 框架. Hello World yarn add koa then var koa = require('koa'); var app = new koa(); app.use(async ctx =&amp;gt; { ctx.body='Hello, World'; }) app.listen(3000); 应用程序 级联 const Koa = require('koa'); const app = new Koa(); // logger app.use(async (ctx, next) =&amp;gt; { console.log('func1 start'); await next();</description></item><item><title>无线局域网下的 IEEE 1588 精确时间协议的软件和硬件实现 Software and Hardware Prototypes of the IEEE 1588 Precision Time Protocol on Wireless LAN</title><link>https://blog.acdzh.ltd/tec/2020-07/Software_and_Hardware_Prototypes_of_the_IEEE_1588_Precision_Time_Protocol_on_Wireless_LAN/</link><pubDate>Sun, 05 Jul 2020 15:32:04 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-07/Software_and_Hardware_Prototypes_of_the_IEEE_1588_Precision_Time_Protocol_on_Wireless_LAN/</guid><description>这篇论文是一门课的作业&amp;hellip;原文地址在这里. 实际上这么拿出来把原文放这里算是侵权了, 但估计也没几个人看, 要是人多的时候就撤下来吧.</description></item><item><title>[转] IEEE 1588(PTP) 协议简介</title><link>https://blog.acdzh.ltd/tec/2020-07/ieee1588_introduction/</link><pubDate>Sun, 05 Jul 2020 14:40:48 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-07/ieee1588_introduction/</guid><description>IEEE 1588, Precision Time Protocol (精确时间协议), 简称 PTP, 用于亚微秒级别时间同步精度, 于 2002 年发布 version 1, 2008 年发布 version 2. 其原理是 Delay Request-Response Mechanism (延时响应机制). 如下图所示: 其中共有</description></item><item><title>软件工程经济学笔记 Ch3 - Core Principles and Features of Software Platform</title><link>https://blog.acdzh.ltd/tec/2020-05/se_eco_note_3/</link><pubDate>Wed, 06 May 2020 22:32:20 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-05/se_eco_note_3/</guid><description>lecture - SEE.ch03.lecture.pdf chinese: https://book.mihua.net/book/50/50832/65684.html Goal Understanding ecosystem, platform lifecycles using dominant designs, S-curves, and diffusion curves. Platform properties: multi-sidedness, network effects, multi-homing, architecture, and governance. Platform dynamics: tipping, locking-in, competitive durability, and envelopment. How platform businesses differ from product and service business. Why platforms need a mindset different from products and services. 3.1 核心概念 Core Concepts 生态系统 Ecosystem An environment consists of all</description></item><item><title>软件工程经济学笔记 ch2 - Demand and Supply</title><link>https://blog.acdzh.ltd/tec/2020-04/se_eco_note_2/</link><pubDate>Thu, 30 Apr 2020 11:15:51 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-04/se_eco_note_2/</guid><description>lecture - SEE.ch02.lecture.pdf Goal Distinguish between quantity demanded and demand, and explain what determines demand. Distinguish between quantity supplied and supply, and explain what determines supply. Explain how demand and supply determine price and quantity in a market, and explain the effects of changes in demand and supply. 2.1 Demand 2.1.1 Law of Demand price down -&amp;gt; demand up 2.1.2 Demand Schedule &amp;amp; Demand Curve Demand: the relationship between the</description></item><item><title>软件工程经济学笔记 ch1 - Introduction of Software Engineering Economy</title><link>https://blog.acdzh.ltd/tec/2020-04/se_eco_note_1/</link><pubDate>Wed, 29 Apr 2020 23:29:49 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-04/se_eco_note_1/</guid><description>lecture - SEE.ch01.lecture.pdf Goal Define economics and explain the questions that economists try to answer. Explain the kinds of questions that define the economic way of thinking. 1.1 Definition &amp;amp; Ques 经济问题 &amp;lt;- 人的需求 &amp;gt; 可用资源 Scarcity 稀缺 原因: 需求 &amp;gt; 资源 =&amp;gt; 需要替代方案. Economics Defined 经济学定</description></item><item><title>从零开始的 .Net Shell 扩展教程 (六) - Shell 图标添加叠加层</title><link>https://blog.acdzh.ltd/tec/2020-04/sharpshell_tutorial_6/</link><pubDate>Wed, 29 Apr 2020 15:23:08 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-04/sharpshell_tutorial_6/</guid><description>使用.Net 创建 Shell 图标叠加层处理程序(Shell Icon Overlay Handlers)! (为图标添加叠加层) 介绍 Shell 图标叠加层处理程序很有用. 它们可以让你在Shell 对象上显示</description></item><item><title>测试页</title><link>https://blog.acdzh.ltd/others/test/</link><pubDate>Fri, 24 Apr 2020 22:52:10 +0800</pubDate><guid>https://blog.acdzh.ltd/others/test/</guid><description>test page netease music 如因版权问题无法加载, 请跳转至网易云播放. youtube Watch this video on YouTube bilibili video Sorry, your browser doesn't support embedded videos.</description></item><item><title>LeetCode 887 鸡蛋掉落</title><link>https://blog.acdzh.ltd/tec/2020-04/leetcode_887_super_egg_drop/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-04/leetcode_887_super_egg_drop/</guid><description>10. 鸡蛋掉落 - 力扣 leetcode-cn.com Google的面试题, 网上的题解太多了, 所以这篇文章就不做题解之用了. 主要是这里遇到的反向 dp 有点意思, 记录一下. 以下: K: 鸡</description></item><item><title>LeetCode 10 正则表达式匹配 Regular Expression Matching</title><link>https://blog.acdzh.ltd/tec/2020-04/leetcode_10_regular_expression_matching/</link><pubDate>Sat, 04 Apr 2020 04:02:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-04/leetcode_10_regular_expression_matching/</guid><description>10. 正则表达式匹配 - 力扣 leetcode-cn.com 这个题本来没什么好说的, 简单的动态规划. 本来想直接糊个动态规划过去..然后看到题解里一个有限自动机的解法. 不过感觉废</description></item><item><title>Wallpaper Engine 壁纸 Colour Clock</title><link>https://blog.acdzh.ltd/tec/2020-04/wallpaper-colour_clock/</link><pubDate>Wed, 01 Apr 2020 13:36:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-04/wallpaper-colour_clock/</guid><description>今天心血来潮又打开了 windows 的屏保, 无奈自带的屏保太少了, 在网上找到了一篇 17 年的老文: 8 款屏保程序，让你的 Windows 锁屏每次都充满惊喜 - 少数派 ​ 其中有一个</description></item><item><title>从零开始的 .Net Shell 扩展教程 (五) - Shell 预览处理程序</title><link>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_5/</link><pubDate>Sun, 08 Mar 2020 15:47:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_5/</guid><description>使用 .Net 快速为 Windows 资源管理器或 Outlook 创建 Shell 预览处理程序! 介绍 Shell Preview Handler 是在系统中注册的 DLL, 它可以使您直接在 Windows 资源管理器中为选中的项目创建外观丰富的预览. 它</description></item><item><title>从零开始的 .Net Shell 扩展教程 (四) - Shell 拖拽处理程序</title><link>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_4/</link><pubDate>Sat, 07 Mar 2020 23:46:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_4/</guid><description>使用 .Net 快速创建 Shell 拖拽处理程序. 介绍 Shell 提示信息处理程序是在系统中注册的 DLL, 用来扩展 Shell 中的拖放功能. 您可以使用该扩展使文件成为其他文件的放置目标,</description></item><item><title>从零开始的 .Net Shell 扩展教程 (三) - Shell 提示处理程序</title><link>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_3/</link><pubDate>Sat, 07 Mar 2020 15:45:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_3/</guid><description>使用 .Net 快速自定义 Shell 提示信息. 介绍 Shell 提示信息处理程序是在系统中注册的 DLL, 用来自定义 Shell 中项目的提示. 在本文中, 我将向您展示如何使用 .Net 和 SharpS</description></item><item><title>从零开始的 .Net Shell 扩展教程 (二) - Shell 图标处理程序 (Icon Handlers)</title><link>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_2/</link><pubDate>Sat, 07 Mar 2020 15:23:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_2/</guid><description>使用 .Net 快速创建 Shell 图标处理程序扩展. 介绍 Shell 图标处理程序是在系统中注册的 DLL, 用来自定义图标外观. 在本文中, 我将向您展示如何使用 .Net 和 SharpShe</description></item><item><title>从零开始的 .Net Shell 扩展教程 (一) - Shell 上下文菜单</title><link>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_1/</link><pubDate>Sat, 07 Mar 2020 15:20:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-03/sharpshell_tutorial_1/</guid><description>使用 .Net 快速创建 Shell 上下文菜单扩展. 介绍 在 .NET 4.0 之前, 不可能使用 .NET 代码可靠地创建 Windows Shell 扩展. 通过对框架的改进, 现在可以使用 .NET 创建这些扩展. 在本文中,</description></item><item><title>修复链断裂的虚拟磁盘</title><link>https://blog.acdzh.ltd/tec/2020-03/%E4%BF%AE%E5%A4%8D%E9%93%BE%E6%96%AD%E8%A3%82%E7%9A%84%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2020-03/%E4%BF%AE%E5%A4%8D%E9%93%BE%E6%96%AD%E8%A3%82%E7%9A%84%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98/</guid><description>这是一篇水文, 仅作记录之用 本文最后修改于 2020-03-01 03:48, 互联网日新月异, 请注意内容时效. 刚刚想在 tim 里搜索一个月前发过的一条消息, 结果搜索结果是空的. 去消</description></item><item><title>UEFI 原理与编程 4 - 三种方式实现 HelloWorld</title><link>https://blog.acdzh.ltd/tec/2019-12/uefi_tutorial_4-three_ways_helloworld/</link><pubDate>Wed, 25 Dec 2019 20:29:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2019-12/uefi_tutorial_4-three_ways_helloworld/</guid><description>UEFI工程模块文件 在工作区新建目录 infs/UefiMain 添加文件: UefiMain.c, 内容如下: #include &amp;lt;Uefi.h&amp;gt; EFI_STATUS UefiMain ( IN EFI_HANDLE ImageHandle, IN EFI_SYSTEM_TABLE *SystemTable ) { SystemTable -&amp;gt; ConOut-&amp;gt; OutputString(SystemTable-&amp;gt;ConOut, L&amp;quot;HelloWorld\n&amp;quot;); return EFI_SUCCESS; } 再添加一个文件: UefiMain.inf, 内容如下: [Defines] INF_VERSION = 0x00010006 BASE_NAME</description></item><item><title>在命令行中使用 Cl.exe 编译器</title><link>https://blog.acdzh.ltd/tec/2019-12/use_cl_in_command_line/</link><pubDate>Fri, 20 Dec 2019 01:03:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2019-12/use_cl_in_command_line/</guid><description>本来网上已经有很多教程了, 但是要么老旧, 要么习惯x差, dll文件复制来复制去&amp;hellip;&amp;hellip; 把自己的配置发上来, 作为一个存档</description></item><item><title>Github Organizations 拼图 2 - Github Api</title><link>https://blog.acdzh.ltd/tec/2019-12/github_organizations_puzzle_2-github_api/</link><pubDate>Fri, 13 Dec 2019 00:27:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2019-12/github_organizations_puzzle_2-github_api/</guid><description>前言 上一篇文章 介绍了如何将图片切开, 那么下一步的操作就是与 Github 进行交互, 将图片上传上去. Github有官方的api, 但是遗憾的是, 涉及的 Organizations 的 api</description></item><item><title>Github Organizations 拼图 1 - 图像切割</title><link>https://blog.acdzh.ltd/tec/2019-12/github_organizations_puzzle_1-cut_image/</link><pubDate>Wed, 11 Dec 2019 22:16:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2019-12/github_organizations_puzzle_1-cut_image/</guid><description>前言 项目地址: https://github.com/acdzh/Github_Organizations_Jigsaw 首先看一下效果: https://github.com/acdzh 我们要实现的是左下角Organization的拼图效果: 因为涉及内容比较多, 所以拆分成3篇文章来叙述. 本篇</description></item><item><title>UEFI 原理与编程 3 - EDK2 U盘启动盘制作</title><link>https://blog.acdzh.ltd/tec/2019-10/uefi_tutorial_3-edk2_boot_disk/</link><pubDate>Thu, 24 Oct 2019 16:38:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2019-10/uefi_tutorial_3-edk2_boot_disk/</guid><description>传统Legacy模式启动盘 编译DuetPkg build --nt32 build -a X64 -p DuetPkg\DuetPkgX64.dsc cd DuetPkg createbookdisk.bat usb E: FAT32 X64 createbookdisk.bat usb E: FAT32 X64 step2 cd ..\Build\DuetPkgX64\DEBUG_VS2015\X64 cp HelloWorld.efi E:\efi\boot\HelloWorld.efi /y 现在, U盘内的结构应如下 Efildr20 用于在Legacy</description></item><item><title>UEFI 原理与编程 2 - 修改启动图标 / 设置启动时间</title><link>https://blog.acdzh.ltd/tec/2019-10/uefi_tutorial_2-edit_bootimg_boottime/</link><pubDate>Thu, 10 Oct 2019 02:38:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2019-10/uefi_tutorial_2-edit_bootimg_boottime/</guid><description>修改启动图标 找到路径 &amp;lt;HOME&amp;gt;\MdeModulePkg\Logo 下的 logo.bmp 文件, 替换. 重新编译运行. 修改启动时间 搜索 &amp;ldquo;Wait&amp;rdquo;, 找到 &amp;lt;HOME&amp;gt;\MdeModulePkg\Universal\BdsDxe\BdsEntry.c, Line 316, BdsWait 函数. 可以发现, 倒计时由 TimeoutRemain 进行控制, 于是添加一句 TimeoutRemain = 15;, 即</description></item><item><title>vhdx 文件装载后无法卸载</title><link>https://blog.acdzh.ltd/tec/2019-10/vhdx-%E6%96%87%E4%BB%B6%E8%A3%85%E8%BD%BD%E5%90%8E%E6%97%A0%E6%B3%95%E5%8D%B8%E8%BD%BD/</link><pubDate>Wed, 09 Oct 2019 23:30:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2019-10/vhdx-%E6%96%87%E4%BB%B6%E8%A3%85%E8%BD%BD%E5%90%8E%E6%97%A0%E6%B3%95%E5%8D%B8%E8%BD%BD/</guid><description>尝试1: 在磁盘管理器中卸载 磁盘管理器中并无相关选项 尝试2: 在设备管理器中卸载掉对应的虚拟磁盘驱动器(但是刷新后又回来了), 尝试修改原 vhdx 文件,</description></item><item><title>UEFI 原理与编程 1 - UEFI开发环境 EDK2 搭建</title><link>https://blog.acdzh.ltd/tec/2019-10/uefi_tutorial_1-start_edk2/</link><pubDate>Wed, 09 Oct 2019 17:09:00 +0800</pubDate><guid>https://blog.acdzh.ltd/tec/2019-10/uefi_tutorial_1-start_edk2/</guid><description>概述 不同的厂商对UEFI有不同的实现, 一种比较常用的开源实现是EDK2. EDK2是一个遵循UEFI标准和PI标准的跨平台固件开发环境. EDK</description></item></channel></rss>